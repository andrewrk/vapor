const from_base64 = atob or alert "this browser can't decode base64 data"

const flip_horizontal_flag = 0x80000000
const flip_vertical_flag   = 0x40000000
const flip_diagonal_flag   = 0x20000000
const imageid_mask         = 0x1fffffff

window.Map = class Map
  ~>
    @tilesets = []
    @layers = []
    @objects = []
  tile: (layer, x, y) -> @layers[layer][y]?[x] ? 0
  draw_tiles: (context, view_aabb) ->
    for layer_index from 0 til @layers.length
      for y from Math.floor(view_aabb.lowerBound.y) to Math.ceil(view_aabb.upperBound.y)
        for x from Math.floor(view_aabb.lowerBound.x) to Math.ceil(view_aabb.upperBound.x)
          @draw_tile context, layer_index, x, y
  draw_tile: (context, layer_index, x, y) ->
    tile = @tile layer_index, x, y
    return if tile is 0

    flip_horizontal = !!(tile & flip_horizontal_flag)
    flip_vertical = !!(tile & flip_vertical_flag)
    flip_diagonal = !!(tile & flip_diagonal_flag)
    rotation = 0
    if flip_diagonal
      rotation += Math.PI / 2
      !=flip_horizontal

    imageid = tile & imageid_mask
    for tileset of @tilesets
      image_bounds = tileset.image_bounds imageid
      break if image_bounds?

    context.save!
    half_width = image_bounds.width / 2
    half_height = image_bounds.height / 2
    context.translate x * @scale + half_width, y * @scale + half_height
    context.scale(
      if flip_horizontal then -1 else 1
      if flip_vertical then -1 else 1
    )
    context.rotate rotation
    context.drawImage(tileset.image
      image_bounds.x, image_bounds.y, image_bounds.width, image_bounds.height
      -half_width,    -half_height,   image_bounds.width, image_bounds.height
    )
    context.restore!

Map.Tileset = class Tileset
  image_bounds: (imageid) ->
    local_id = imageid - @first_gid
    return null if local_id < 0
    column_count = @width / @tilewidth
    row = Math.floor local_id / column_count
    row_count = @height / @tileheight
    return null if row >= row_count
    column = local_id % column_count
    return {} =
      x: column * @tilewidth
      y: row * @tileheight
      width: @tilewidth
      height: @tileheight


Map.parse = (text, create_wait_condition) ->
  map = new Map!
  xml = new DOMParser!.parseFromString text, "text/xml"
  root = xml.getElementsByTagName("map")[0]
  map.scale = parseInt root.getAttribute "tilewidth"
  for tileset_element of root.getElementsByTagName "tileset"
    tileset = new Tileset!
    tileset.first_gid = parseInt tileset_element.getAttribute "firstgid"
    tileset.tilewidth = parseInt tileset_element.getAttribute "tilewidth"
    tileset.tileheight = parseInt tileset_element.getAttribute "tileheight"
    image_element = tileset_element.getElementsByTagName("image")[0]
    tileset.image = new Image!
    tileset.image.src = image_element.getAttribute "source"
    tileset.image.onload = create_wait_condition "tileset"
    tileset.width = parseInt image_element.getAttribute "width"
    tileset.height = parseInt image_element.getAttribute "height"
    map.tilesets.push tileset
  for layer_element of root.getElementsByTagName "layer"
    name = layer_element.getAttribute "name"
    width  = parseInt layer_element.getAttribute "width"
    height = parseInt layer_element.getAttribute "height"
    data_element = layer_element.getElementsByTagName("data")[0]
    if data_element.getAttribute("compression")
      alert "can't decompress map. store maps with base64 uncompressed data."
      return
    data_string = from_base64 data_element.textContent.trim!
    i = 0
    map.layers.push layer = []
    for y from 0 til height
      layer.push row = []
      for x from 0 til width
        tile_value  = data_string.charCodeAt(i++)
        tile_value |= data_string.charCodeAt(i++) << 8
        tile_value |= data_string.charCodeAt(i++) << 16
        tile_value |= data_string.charCodeAt(i++) << 24
        row.push tile_value
    if name is "physics"
      map.physics_layer = layer
  for objectgroup_element of root.getElementsByTagName "objectgroup"
    for object_element of objectgroup_element.getElementsByTagName "object"
      properties = {}
      for properties_element of object_element.getElementsByTagName "properties"
        for property_element of properties_element.getElementsByTagName "property"
          properties[property_element.getAttribute "name"] = property_element.getAttribute "value"
      map.objects.push(
        x: parseInt object_element.getAttribute "x"
        y: parseInt object_element.getAttribute "y"
        width: parseInt object_element.getAttribute "width"
        height: parseInt object_element.getAttribute "height"
        type: object_element.getAttribute "type"
        properties: properties
      )
  map
