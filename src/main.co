#depend "chem"
#depend "map"

const b2Vec2 = Box2D.Common.Math.b2Vec2
const b2BodyDef = Box2D.Dynamics.b2BodyDef
const b2Body = Box2D.Dynamics.b2Body
const b2FixtureDef = Box2D.Dynamics.b2FixtureDef
const b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef
const b2World = Box2D.Dynamics.b2World
const b2DebugDraw = Box2D.Dynamics.b2DebugDraw
const b2AABB = Box2D.Collision.b2AABB
const b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape
const b2CircleShape = Box2D.Collision.Shapes.b2CircleShape

# ugh. make this api more coffee-like
query_aabb = (world, aabb, callback) ->
  # callback should be the last parameter
  actual_callback = (fixture) ->
    # invert the return value, so that the default case continues
    !callback fixture
  world.QueryAABB callback, aabb

make_aabb = (x1, y1, x2, y2) ->
  result = new b2AABB!
  result.lowerBound.x = x1
  result.lowerBound.y = y1
  result.upperBound.x = x2
  result.upperBound.y = y2
  result

map = null
let
  waiting_events = []
  create_wait_condition = (name) ->
    index = waiting_events.length
    waiting_events.push name
    !->
      waiting_events[index] = null
      done = true
      list = document.getElementById "loading-list"
      list.innerHTML = ""
      for event_name of waiting_events
        continue unless event_name?
        item = document.createElement "li"
        item.innerHTML = event_name
        list.appendChild item
        done = false
      if done
        document.getElementById("loading").setAttribute "style", "display:none;"
        init!

  Chem.onReady create_wait_condition "sprites"

  map_is_ready = create_wait_condition "map"
  request = new XMLHttpRequest!
  request.onreadystatechange = !->
    return unless request.readyState is 4 and request.status is 200
    map := Map.parse request.responseText, create_wait_condition
    map_is_ready!
  request.open "GET", "map.tmx", true
  request.send!

  parse_map = ->

init = ->
  const canvas = document.getElementById "game"
  const canvas_center = new Chem.Vec2d canvas.getAttribute("width")/2, canvas.getAttribute("height")/2
  const engine = new Chem.Engine canvas
  const man_sprite = new Chem.Sprite 'man',
    z_order: 1
  const gravity = new b2Vec2 0, 30

  # GIMME THE FIZZAQS!
  const view_scale = map.scale
  world = null
  gravity_scale_zones = []
  debug_drawer = null
  debug_drawing = false
  man_body = null
  feet_body = null
  let
    world := new b2World gravity, true

    debug_drawer := new b2DebugDraw()
    debug_drawer.SetSprite canvas.getContext "2d"
    debug_drawer.SetDrawScale view_scale
    debug_drawer.SetFillAlpha 0.5
    debug_drawer.SetLineThickness 1
    debug_drawer.SetFlags b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit
    world.SetDebugDraw debug_drawer

    fixture_def = new b2FixtureDef!
    fixture_def.density = 1.0
    fixture_def.friction = 0.5
    fixture_def.restitution = 0

    # create the room
    # we're going to group horizontal tile neighbors into single rectangular fixtures because:
    #   it prevents you from bumping along the corners in the ground. see e5022e9137d1b81442d7049e0ff7d4d2d25ab679
    #   it's more efficient?
    #   it's pretty easy to implement
    fixture_def.shape = new b2PolygonShape!
    stretch_floor_start = null
    stretch_floor_end = null
    flush_strech_floor = ->
      return unless stretch_floor_start?
      body_def = new b2BodyDef!
      body_def.type = b2Body.b2_staticBody
      body_def.position.x = (stretch_floor_start.x + stretch_floor_end.x) / 2
      body_def.position.y = (stretch_floor_start.y + stretch_floor_end.y) / 2
      fixture_def.shape.SetAsBox(
        (stretch_floor_end.x - stretch_floor_start.x) / 2
        (stretch_floor_end.y - stretch_floor_start.y) / 2
      )
      world.CreateBody(body_def).CreateFixture fixture_def
      stretch_floor_start := null
    # create walls from the map
    for row, y of map.physics_layer
      for value, x of row
        if value is not 0
          if not stretch_floor_start?
            stretch_floor_start := new b2Vec2 x, y
          stretch_floor_end := new b2Vec2 x+1, y+1
        else
          flush_strech_floor!
      flush_strech_floor!
    for object of map.objects
      if (gravity_scale = object.properties.gravity_scale)?
        gravity_scale_zones.push(
          scale: gravity_scale
          aabb: make_aabb(
            object.x / map.scale
            object.y / map.scale
            (object.x + object.width) / map.scale
            (object.y + object.height) / map.scale
          )
        )

    # create the man
    body_def = new b2BodyDef!
    body_def.type = b2Body.b2_dynamicBody
    fixture_def.friction = 0
    fixture_def.shape = new b2PolygonShape!
    fixture_def.shape.SetAsBox 0.4, 1.1
    body_def.position.x = 40
    body_def.position.y = 43
    body_def.fixedRotation = true
    man_body := world.CreateBody body_def
    body_def.fixedRotation = false
    man_body.SetUserData man_sprite
    man_body.CreateFixture fixture_def

    body_def.position.y += 1.1
    feet_body := world.CreateBody body_def
    fixture_def.shape = new b2CircleShape 0.4 - 0.01
    fixture_def.restitution = 0
    fixture_def.friction = 3
    feet_body.CreateFixture fixture_def
    # feet_body.SetUserData new Chem.Sprite 'ship'

    joint_def = new b2RevoluteJointDef!
    joint_def.Initialize man_body, feet_body, feet_body.GetWorldCenter!
    world.CreateJoint joint_def

  is_grounded = null
  engine.on 'update', (dt, dx) ->

    debug_drawing := !debug_drawing if engine.buttonJustPressed Chem.Button.Key_Grave

    is_grounded := do ->
      contact_edge = feet_body.GetContactList!
      while contact_edge
        if contact_edge.contact.IsTouching!
          return true
        contact_edge = contact_edge.next
      false

    man_velocity = man_body.GetLinearVelocity!

    # left/right
    horizontal_intention = 0
    horizontal_intention-- if engine.buttonState Chem.Button.Key_Left
    horizontal_intention++ if engine.buttonState Chem.Button.Key_Right
    # rotate feet wheel to move on the ground
    feet_angular_velocity = 30 * horizontal_intention
    feet_body.SetAngularVelocity feet_angular_velocity
    feet_body.SetFixedRotation horizontal_intention is 0
    feet_body.SetAwake true
    # additional left/right control for in the air
    feet_radius = feet_body.GetFixtureList!.m_shape.m_radius
    feet_max_velocity = feet_angular_velocity * feet_radius
    magic_max_velocity = 0.8 * feet_max_velocity
    if horizontal_intention * man_velocity.x < horizontal_intention * magic_max_velocity
      # magic acceleration
      man_body.ApplyImpulse new b2Vec2(2.0 * horizontal_intention, 0), man_body.m_xf.position

    # notice gravity scales
    world.SetGravity gravity
    for {scale, aabb} of gravity_scale_zones
      if aabb.TestOverlap man_body.GetFixtureList!.GetAABB!
        scaled_gravity = gravity.Copy!
        scaled_gravity.Multiply scale
        world.SetGravity scaled_gravity

    # JOMP!
    jump_button = Chem.Button.Key_Space
    if is_grounded and engine.buttonJustPressed jump_button
      man_body.ApplyImpulse new b2Vec2(0, -41), man_body.m_xf.position
    const jump_stop = -5
    if not engine.buttonState jump_button and man_velocity.y < jump_stop
      man_velocity.y = jump_stop

    world.Step dt, 10, 10
    world.ClearForces!

  world_to_canvas = ->
    in_pixels = new Chem.Vec2d(it).scale(view_scale)
    # snap to integer pixels to prevent seeing cracks between tiles
    in_pixels.floor!
    return in_pixels
  get_view_aabb = ->
    make_aabb(
      man_body.m_xf.position.x - canvas_center.x / view_scale
      man_body.m_xf.position.y - canvas_center.y / view_scale
      man_body.m_xf.position.x + canvas_center.x / view_scale
      man_body.m_xf.position.y + canvas_center.y / view_scale
    )

  engine.on 'draw', (context) ->
    # clear canvas to black
    context.fillStyle = '#000000'
    context.fillRect 0, 0, engine.size.x, engine.size.y
    context.save!
    let center = world_to_canvas(new Chem.Vec2d man_body.m_xf.position).sub canvas_center
      context.translate -center.x, -center.y

    if debug_drawing
      world.DrawDebugData!
    else
      # draw the map first
      view_aabb = get_view_aabb!
      map.draw_tiles context, view_aabb

      # figure out which bodies to draw
      sprite_batch = new Chem.Batch!
      query_aabb world, view_aabb, (fixture) ->
        body = fixture.GetBody!
        sprite = body.GetUserData!
        if sprite instanceof Chem.Sprite
          # set the positions of sprite
          sprite.pos = world_to_canvas body.m_xf.position
          sprite.rotation = body.m_xf.GetAngle!
          sprite_batch.add sprite
        body = body.m_next

      # draw the sprites in front of the above walls
      engine.draw sprite_batch

    context.restore!
    # draw a little fps counter in the corner
    context.fillStyle = '#ffffff'
    engine.drawFps!
    context.fillText "grounded = #{is_grounded}", 100, canvas_center.y * 2

  engine.start!
  canvas.focus!

