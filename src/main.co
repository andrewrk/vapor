#depend "chem"

const from_base64 = atob or alert "this browser can't decode base64 data"

const b2Vec2 = Box2D.Common.Math.b2Vec2
const b2BodyDef = Box2D.Dynamics.b2BodyDef
const b2Body = Box2D.Dynamics.b2Body
const b2FixtureDef = Box2D.Dynamics.b2FixtureDef
const b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef
const b2World = Box2D.Dynamics.b2World
const b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape
const b2CircleShape = Box2D.Collision.Shapes.b2CircleShape

map = null
let
  waiting_events = []
  create_wait_condition = (name) ->
    index = waiting_events.length
    waiting_events.push name
    !->
      waiting_events[index] = null
      done = true
      list = document.getElementById "loading-list"
      list.innerHTML = ""
      for event_name of waiting_events
        continue unless event_name?
        item = document.createElement "li"
        item.innerHTML = event_name
        list.appendChild item
        done = false
      if done
        document.getElementById("loading").setAttribute "style", "display:none;"
        init!

  Chem.onReady create_wait_condition "sprites"

  map_is_ready = create_wait_condition "map"
  request = new XMLHttpRequest!
  request.onreadystatechange = !->
    return unless request.readyState is 4 and request.status is 200
    map := parse_map request.responseText
    map_is_ready!
  request.open "GET", "map.tmx", true
  request.send!

  parse_map = ->
    xml = new DOMParser!.parseFromString it, "text/xml"
    root = xml.getElementsByTagName("map")[0]
    tilesets = []
    for tileset of root.getElementsByTagName "tileset"
      first_gid = parseInt tileset.getAttribute "firstgid"
      image_tag = tileset.getElementsByTagName("image")[0]
      image = new Image!
      image.src = image_tag.getAttribute "source"
      image.onload = create_wait_condition "tileset"
      tilesets.push([first_gid, image])
    layers = []
    for layer_tag of root.getElementsByTagName "layer"
      width  = parseInt layer_tag.getAttribute "width"
      height = parseInt layer_tag.getAttribute "height"
      data_tag = layer_tag.getElementsByTagName("data")[0]
      if data_tag.getAttribute("compression")
        alert "can't decompress map. store maps with base64 uncompressed data."
        return
      data_string = from_base64 data_tag.textContent.trim!
      i = 0
      layers.push layer = []
      for y from 0 til height
        layer.push row = []
        for x from 0 til width
          tile_value  = data_string.charCodeAt(i++)
          tile_value |= data_string.charCodeAt(i++) << 8
          tile_value |= data_string.charCodeAt(i++) << 16
          tile_value |= data_string.charCodeAt(i++) << 24
          row.push tile_value
    return {tilesets, layers}

init = ->
  const canvas = document.getElementById "game"
  const canvas_center = new Chem.Vec2d canvas.getAttribute("width")/2, canvas.getAttribute("height")/2
  const engine = new Chem.Engine canvas
  const batch = new Chem.Batch!
  const boom = new Chem.Sound 'sfx/boom.ogg'
  const man_sprite = new Chem.Sprite 'man',
    batch: batch
    z_order: 1

  # GIMME THE FIZZAQS!
  world = null
  man_body = null
  feet_body = null
  let
    gravity = new b2Vec2 0, 30
    world := new b2World gravity, true

    fixDef = new b2FixtureDef!
    fixDef.density = 1.0
    fixDef.friction = 0.5
    fixDef.restitution = 0

    bodyDef = new b2BodyDef!

    # create the room
    bodyDef.type = b2Body.b2_staticBody
    fixDef.shape = new b2PolygonShape!
    make_wall = (center_x, center_y, half_size_x, half_size_y) ->
      bodyDef.position.x = center_x
      bodyDef.position.y = center_y
      fixDef.shape.SetAsBox half_size_x, half_size_y
      world.CreateBody(bodyDef).CreateFixture fixDef
    # create walls from the map
    for layer of map.layers
      for row, y of layer
        for value, x of row
          if value is not 0
            make_wall x+0.5, y+0.5, 0.5, 0.5

    # create the man
    bodyDef.type = b2Body.b2_dynamicBody
    fixDef.shape = new b2PolygonShape!
    fixDef.shape.SetAsBox 0.4, 1.1
    fixDef.restitution = 0.2
    fixDef.friction = 0
    bodyDef.position.x = 5
    bodyDef.position.y = 5
    bodyDef.fixedRotation = true
    man_body := world.CreateBody bodyDef
    bodyDef.fixedRotation = false
    man_body.SetUserData man_sprite
    man_body.CreateFixture fixDef

    bodyDef.position.x = 5
    bodyDef.position.y = 5 + 1.1
    feet_body := world.CreateBody bodyDef
    fixDef.shape = new b2CircleShape 0.4 - 0.01
    fixDef.restitution = 0
    fixDef.friction = 3
    feet_body.CreateFixture fixDef
    feet_body.SetUserData new Chem.Sprite 'ship', batch: batch

    joint_def = new b2RevoluteJointDef!
    joint_def.Initialize man_body, feet_body, feet_body.GetWorldCenter!
    world.CreateJoint joint_def

  engine.on 'update', (dt, dx) ->
    is_grounded = do ->
      contact_edge = feet_body.GetContactList!
      while contact_edge
        if contact_edge.contact.IsTouching!
          return true
        contact_edge = contact_edge.next
      false

    # left/right
    const rotation_speed = 30
    angular_velocity = 0
    if engine.buttonState Chem.Button.Key_Left
      angular_velocity -= rotation_speed
    if engine.buttonState Chem.Button.Key_Right
      angular_velocity += rotation_speed
    feet_body.SetAngularVelocity angular_velocity
    feet_body.SetFixedRotation angular_velocity is 0
    feet_body.SetAwake true

    # JOMP!
    if is_grounded and engine.buttonJustPressed Chem.Button.Key_Up
      man_body.ApplyImpulse new b2Vec2(0, -48), man_body.m_xf.position

    # press space to blow yourself up
    if engine.buttonJustPressed Chem.Button.Key_Space
      boom.play!
      man_sprite.setAnimationName 'boom'
      man_sprite.setFrameIndex 0
      man_sprite.on 'animation_end', ->
        man_sprite.delete!

    world.Step dt, 10, 10
    world.ClearForces!

  world_to_canvas = ->
    new Chem.Vec2d(it).sub(man_body.m_xf.position).scale(32).add(canvas_center)

  engine.on 'draw', (context) ->
    # clear canvas to black
    context.fillStyle = '#000000'
    context.fillRect 0, 0, engine.size.x, engine.size.y

    body = world.GetBodyList!
    while body
      sprite = body.GetUserData!
      if sprite instanceof Chem.Sprite
        # set the positions of sprite
        sprite.pos = world_to_canvas body.m_xf.position
        sprite.rotation = body.m_xf.GetAngle!
      else if (fixture = body.GetFixtureList!)?
        # just draw the bounding box
        context.fillStyle = '#ffff66'
        lower_bound = world_to_canvas fixture.GetAABB!.lowerBound
        upper_bound = world_to_canvas fixture.GetAABB!.upperBound
        context.fillRect(
          lower_bound.x
          lower_bound.y
          upper_bound.x - lower_bound.x
          upper_bound.y - lower_bound.y
        )
      body = body.m_next

    # draw all the sprites
    engine.draw batch

    # draw a little fps counter in the corner
    context.fillStyle = '#ffffff'
    engine.drawFps!

  engine.start!
  canvas.focus!

