#depend "chem"
#depend "map"

const b2Vec2 = Box2D.Common.Math.b2Vec2
const b2BodyDef = Box2D.Dynamics.b2BodyDef
const b2Body = Box2D.Dynamics.b2Body
const b2FixtureDef = Box2D.Dynamics.b2FixtureDef
const b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef
const b2World = Box2D.Dynamics.b2World
const b2DebugDraw = Box2D.Dynamics.b2DebugDraw
const b2AABB = Box2D.Collision.b2AABB
const b2MassData = Box2D.Collision.Shapes.b2MassData
const b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape
const b2CircleShape = Box2D.Collision.Shapes.b2CircleShape

# ugh. make this api more coffee-like
query_aabb = (world, aabb, callback) ->
  # callback should be the last parameter
  actual_callback = (fixture) ->
    # invert the return value, so that the default case continues
    !callback fixture
  world.QueryAABB callback, aabb

# couldn't find an existing function for this, so here's my version
aabb_contains_point = (aabb, point) ->
  ( aabb.lowerBound.x <= point.x and point.x < aabb.upperBound.x and
    aabb.lowerBound.y <= point.y and point.y < aabb.upperBound.y )

make_aabb = (x1, y1, x2, y2) ->
  result = new b2AABB!
  result.lowerBound.x = x1
  result.lowerBound.y = y1
  result.upperBound.x = x2
  result.upperBound.y = y2
  result

map = null
let
  waiting_events = []
  create_wait_condition = (name) ->
    index = waiting_events.length
    waiting_events.push name
    !->
      waiting_events[index] = null
      done = true
      list = document.getElementById "loading-list"
      list.innerHTML = ""
      for event_name of waiting_events
        continue unless event_name?
        item = document.createElement "li"
        item.innerHTML = event_name
        list.appendChild item
        done = false
      if done
        document.getElementById("loading").setAttribute "style", "display:none;"
        init!

  Chem.onReady create_wait_condition "sprites"

  map_is_ready = create_wait_condition "map"
  request = new XMLHttpRequest!
  request.onreadystatechange = !->
    return unless request.readyState is 4 and request.status is 200
    map := Map.parse request.responseText, create_wait_condition
    map_is_ready!
  request.open "GET", "map.tmx", true
  request.send!

init = ->
  const canvas = document.getElementById "game"
  const canvas_center = new Chem.Vec2d canvas.getAttribute("width")/2, canvas.getAttribute("height")/2
  const engine = new Chem.Engine canvas
  const standard_gravity = new b2Vec2 0, 30

  sounds =
    bchs: new Chem.Sound "sfx/bchs.ogg"
  buttons =
    left: Chem.Button.Key_A
    right: Chem.Button.Key_D
    crouch: Chem.Button.Key_S
    jump: Chem.Button.Key_K
    pew: Chem.Button.Key_J
    debug: Chem.Button.Key_Grave

  # GIMME THE FIZZAQS!
  const view_scale = map.scale
  world = null
  gravity_zones = []
  debug_drawer = null
  debug_drawing = false
  man =
    standing_sprite: new Chem.Sprite 'man_stand', z_order: 1
    crouching_sprite: new Chem.Sprite 'man_crouch', z_order: 1
    half_width: 0.8/2
    sensor_half_width: 0.8/2 * 0.95
    standing_half_height: 2.6/2
    crouching_half_height: 2.0/2
    ground_sensor_height: 0.05
    body: null
    mass: null
    ground_sensor: null
    torso_fixture: null
    is_grounded: null
    was_grounded: false
    is_crouching: null
    was_crouching: false
    last_facing_direction: 1
  window?._debug_man = man
  let
    world := new b2World new b2Vec2(), true

    debug_drawer := new b2DebugDraw()
    debug_drawer.SetSprite canvas.getContext "2d"
    debug_drawer.SetDrawScale view_scale
    debug_drawer.SetFillAlpha 0.5
    debug_drawer.SetLineThickness 1
    debug_drawer.SetFlags b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit
    world.SetDebugDraw debug_drawer

    # create the room
    do
      # we're going to group horizontal tile neighbors into single rectangular fixtures because:
      #   it prevents you from bumping along the corners in the ground. see e5022e9137d1b81442d7049e0ff7d4d2d25ab679
      #   it's more efficient?
      #   it's pretty easy to implement
      fixture_def = new b2FixtureDef!
      fixture_def.density = 1.0
      fixture_def.friction = 0.5
      fixture_def.restitution = 0
      fixture_def.shape = new b2PolygonShape!
      stretch_floor_start = null
      stretch_floor_end = null
      flush_strech_floor = ->
        return unless stretch_floor_start?
        body_def = new b2BodyDef!
        body_def.type = b2Body.b2_staticBody
        body_def.position.x = (stretch_floor_start.x + stretch_floor_end.x) / 2
        body_def.position.y = (stretch_floor_start.y + stretch_floor_end.y) / 2
        fixture_def.shape.SetAsBox(
          (stretch_floor_end.x - stretch_floor_start.x) / 2
          (stretch_floor_end.y - stretch_floor_start.y) / 2
        )
        world.CreateBody(body_def).CreateFixture fixture_def
        stretch_floor_start := null
      # create walls from the map
      for row, y of map.physics_layer
        for value, x of row
          if value is not 0
            if not stretch_floor_start?
              stretch_floor_start := new b2Vec2 x, y
            stretch_floor_end := new b2Vec2 x+1, y+1
          else
            flush_strech_floor!
        flush_strech_floor!
      for object of map.objects
        gravity_scale = parseFloat object.properties.gravity_scale
        priority = parseFloat object.properties.priority
        if not isNaN(gravity_scale) and not isNaN(priority)
          gravity_zones.push(
            scale: gravity_scale
            priority: priority
            aabb: make_aabb(
              object.x / map.scale
              object.y / map.scale
              (object.x + object.width) / map.scale
              (object.y + object.height) / map.scale
            )
          )
      gravity_zones.sort (a, b) ->
        if a.priority < b.priority then -1 else if a.priority > b.priority then 1 else 0

    # create the man
    body_def = new b2BodyDef!
    body_def.type = b2Body.b2_dynamicBody
    body_def.position.x = 40
    body_def.position.y = 43
    body_def.fixedRotation = true
    man.body := world.CreateBody body_def
    man.body.SetUserData man.standing_sprite
    torso_def = new b2FixtureDef!
    torso_def.density = 1.0
    torso_def.friction = 0
    torso_def.shape = b2PolygonShape.AsBox man.half_width, man.standing_half_height
    man.torso_fixture = man.body.CreateFixture torso_def

    feet_def = new b2FixtureDef!
    feet_def.density = 0
    feet_def.isSensor = true
    feet_def.shape = b2PolygonShape.AsOrientedBox man.sensor_half_width, man.ground_sensor_height, new b2Vec2 0, man.standing_half_height
    man.ground_sensor = man.body.CreateFixture feet_def

    # cache the mass so we can keep it constant through shape changes
    man.mass = man.body.GetMass!

  engine.on 'update', (dt, dx) ->

    debug_drawing := !debug_drawing if engine.buttonJustPressed buttons.debug

    man.is_grounded = do ->
      contact_edge = man.body.GetContactList!
      while contact_edge
        contact = contact_edge.contact
        if contact.IsTouching!
          if contact.GetFixtureA! is man.ground_sensor or contact.GetFixtureB! is man.ground_sensor
            return true
        contact_edge = contact_edge.next
      false
    man.is_crouching = engine.buttonState buttons.crouch

    # adjust bounding box for crouching/standing
    reset_mass = false
    if man.was_crouching and not man.is_crouching
      # stand up
      man.torso_fixture.m_shape = b2PolygonShape.AsBox man.half_width, man.standing_half_height
      man.ground_sensor.m_shape = b2PolygonShape.AsOrientedBox man.sensor_half_width, man.ground_sensor_height, new b2Vec2 0, man.standing_half_height
      reset_mass = true
    if not man.was_crouching and man.is_crouching
      # crouch down
      man.torso_fixture.m_shape = b2PolygonShape.AsBox man.half_width, man.crouching_half_height
      man.ground_sensor.m_shape = b2PolygonShape.AsOrientedBox man.sensor_half_width, man.ground_sensor_height, new b2Vec2 0, man.crouching_half_height
      reset_mass = true
      if man.is_grounded
        # snap to the ground
        position = man.body.GetPosition!.Copy!
        position.y += man.standing_half_height - man.crouching_half_height
        man.body.SetPosition position
    if reset_mass
      man.body.SetAwake true
      man.body.ResetMassData!
      # hold the total mass constant through shape changes
      # but respect the recalculation of center of gravity
      man.body.GetMassData(mass_data = new b2MassData)
      mass_data.mass = man.mass
      man.body.SetMassData mass_data

    man_velocity = man.body.GetLinearVelocity!

    # left/right
    horizontal_intention = 0
    horizontal_intention-- if engine.buttonState buttons.left
    horizontal_intention++ if engine.buttonState buttons.right
    magic_max_velocity = 10 * horizontal_intention
    if horizontal_intention * man_velocity.x < horizontal_intention * magic_max_velocity
      # magic acceleration
      man.body.ApplyImpulse new b2Vec2(2.0 * horizontal_intention, 0), man.body.GetPosition!

    # ground friction with no horizontal intention
    if man.is_grounded and horizontal_intention is 0
      if not man.was_grounded
        # when landing, stop suddenly.
        man.body.SetLinearVelocity x: 0, y: 0
      else
        # slow a run
        get_horizontal_direction = ->
          dx = man_velocity.x
          if dx < 0 then -1 else if dx > 0 then 1 else 0
        direction = get_horizontal_direction!
        if direction is not 0
          man.body.ApplyImpulse new b2Vec2(-2.0 * direction, 0), man.body.GetPosition!
          # if we overshot 0, snap to 0
          new_direction = get_horizontal_direction!
          if new_direction is not 0 and new_direction is not direction
            man.body.SetLinearVelocity x: 0, y: 0

    # notice gravity zones in priority order
    gravity = standard_gravity.Copy!
    for {scale, aabb} of gravity_zones by -1
      if aabb_contains_point aabb, man.body.GetPosition!
        gravity.Multiply scale
        break
    gravity.Multiply man.body.GetMass!
    man.body.ApplyForce gravity, man.body.GetPosition!

    # JOMP!
    if man.is_grounded and engine.buttonJustPressed buttons.jump
      man.body.ApplyImpulse new b2Vec2(0, -39), man.body.GetPosition!
    const jump_stop = -5
    if not engine.buttonState buttons.jump and man_velocity.y < jump_stop
      man_velocity.y = jump_stop

    # pew pew
    if engine.buttonJustPressed buttons.pew
      sounds.bchs.play!

    # update sprite
    facing_direction = horizontal_intention or man.last_facing_direction
    man.last_facing_direction = facing_direction
    sprite = if man.is_crouching then man.crouching_sprite else man.standing_sprite
    sprite.scale.x = facing_direction
    man.body.SetUserData sprite

    world.Step dt, 10, 10
    world.ClearForces!
    man.was_grounded = man.is_grounded
    man.was_crouching = man.is_crouching

  world_to_canvas = ->
    in_pixels = new Chem.Vec2d(it).scale(view_scale)
    # snap to integer pixels to prevent seeing cracks between tiles
    in_pixels.floor!
    return in_pixels
  get_view_aabb = ->
    position = man.body.GetPosition!
    make_aabb(
      position.x - canvas_center.x / view_scale
      position.y - canvas_center.y / view_scale
      position.x + canvas_center.x / view_scale
      position.y + canvas_center.y / view_scale
    )

  engine.on 'draw', (context) ->
    # clear canvas to black
    context.fillStyle = '#000000'
    context.fillRect 0, 0, engine.size.x, engine.size.y
    context.save!
    let center = world_to_canvas(new Chem.Vec2d man.body.GetPosition!).sub canvas_center
      context.translate -center.x, -center.y

    if debug_drawing
      world.DrawDebugData!
    else
      # draw the map first
      view_aabb = get_view_aabb!
      map.draw_tiles context, view_aabb

      # figure out which bodies to draw
      sprite_batch = new Chem.Batch!
      query_aabb world, view_aabb, (fixture) ->
        body = fixture.GetBody!
        sprite = body.GetUserData!
        if sprite instanceof Chem.Sprite
          # set the positions of sprite
          sprite.pos = world_to_canvas body.GetPosition!
          sprite_batch.add sprite
        body = body.m_next

      # draw the sprites in front of the above walls
      engine.draw sprite_batch

    context.restore!
    # draw a little fps counter in the corner
    context.fillStyle = '#ffffff'
    engine.drawFps!
    context.fillText "grounded = #{man.is_grounded}", 100, canvas_center.y * 2

  engine.start!
  canvas.focus!

