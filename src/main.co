#depend "chem"

const from_base64 = atob or alert "this browser can't decode base64 data"

const b2Vec2 = Box2D.Common.Math.b2Vec2
const b2BodyDef = Box2D.Dynamics.b2BodyDef
const b2Body = Box2D.Dynamics.b2Body
const b2FixtureDef = Box2D.Dynamics.b2FixtureDef
const b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef
const b2World = Box2D.Dynamics.b2World
const b2AABB = Box2D.Collision.b2AABB
const b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape
const b2CircleShape = Box2D.Collision.Shapes.b2CircleShape

# ugh. make this api more coffee-like
query_aabb = (world, aabb, callback) ->
  # callback should be the last parameter
  actual_callback = (fixture) ->
    # invert the return value, so that the default case continues
    !callback fixture
  world.QueryAABB callback, aabb

map = null
let
  waiting_events = []
  create_wait_condition = (name) ->
    index = waiting_events.length
    waiting_events.push name
    !->
      waiting_events[index] = null
      done = true
      list = document.getElementById "loading-list"
      list.innerHTML = ""
      for event_name of waiting_events
        continue unless event_name?
        item = document.createElement "li"
        item.innerHTML = event_name
        list.appendChild item
        done = false
      if done
        document.getElementById("loading").setAttribute "style", "display:none;"
        init!

  Chem.onReady create_wait_condition "sprites"

  map_is_ready = create_wait_condition "map"
  request = new XMLHttpRequest!
  request.onreadystatechange = !->
    return unless request.readyState is 4 and request.status is 200
    map := parse_map request.responseText
    map_is_ready!
  request.open "GET", "map.tmx", true
  request.send!

  parse_map = ->
    xml = new DOMParser!.parseFromString it, "text/xml"
    root = xml.getElementsByTagName("map")[0]
    tilesets = []
    for tileset of root.getElementsByTagName "tileset"
      first_gid = parseInt tileset.getAttribute "firstgid"
      image_tag = tileset.getElementsByTagName("image")[0]
      image = new Image!
      image.src = image_tag.getAttribute "source"
      image.onload = create_wait_condition "tileset"
      tilesets.push([first_gid, image])
    layers = []
    for layer_tag of root.getElementsByTagName "layer"
      width  = parseInt layer_tag.getAttribute "width"
      height = parseInt layer_tag.getAttribute "height"
      data_tag = layer_tag.getElementsByTagName("data")[0]
      if data_tag.getAttribute("compression")
        alert "can't decompress map. store maps with base64 uncompressed data."
        return
      data_string = from_base64 data_tag.textContent.trim!
      i = 0
      layers.push layer = []
      for y from 0 til height
        layer.push row = []
        for x from 0 til width
          tile_value  = data_string.charCodeAt(i++)
          tile_value |= data_string.charCodeAt(i++) << 8
          tile_value |= data_string.charCodeAt(i++) << 16
          tile_value |= data_string.charCodeAt(i++) << 24
          row.push tile_value
    return {tilesets, layers}

init = ->
  const canvas = document.getElementById "game"
  const canvas_center = new Chem.Vec2d canvas.getAttribute("width")/2, canvas.getAttribute("height")/2
  const engine = new Chem.Engine canvas
  const boom = new Chem.Sound 'sfx/boom.ogg'
  const man_sprite = new Chem.Sprite 'man',
    z_order: 1

  # GIMME THE FIZZAQS!
  gravity = null
  world = null
  man_body = null
  feet_fixture = null
  let
    gravity := new b2Vec2 0, 30
    world := new b2World gravity, true

    fixture_def = new b2FixtureDef!
    fixture_def.density = 1.0
    fixture_def.friction = 0.5
    fixture_def.restitution = 0

    # create the room
    # we're going to group horizontal tile neighbors into single rectangular fixtures because:
    #   it prevents you from bumping along the corners in the ground. see e5022e9137d1b81442d7049e0ff7d4d2d25ab679
    #   it's more efficient?
    #   it's pretty easy to implement
    fixture_def.shape = new b2PolygonShape!
    stretch_floor_start = null
    stretch_floor_end = null
    flush_strech_floor = ->
      return unless stretch_floor_start?
      body_def = new b2BodyDef!
      body_def.type = b2Body.b2_staticBody
      body_def.position.x = (stretch_floor_start.x + stretch_floor_end.x) / 2
      body_def.position.y = (stretch_floor_start.y + stretch_floor_end.y) / 2
      fixture_def.shape.SetAsBox(
        (stretch_floor_end.x - stretch_floor_start.x) / 2
        (stretch_floor_end.y - stretch_floor_start.y) / 2
      )
      world.CreateBody(body_def).CreateFixture fixture_def
      stretch_floor_start := null
    # create walls from the map
    for layer of map.layers
      for row, y of layer
        for value, x of row
          if value is not 0
            if not stretch_floor_start?
              stretch_floor_start := new b2Vec2 x, y
            stretch_floor_end := new b2Vec2 x+1, y+1
          else
            flush_strech_floor!
        flush_strech_floor!

    # create the man
    body_def = new b2BodyDef!
    body_def.type = b2Body.b2_dynamicBody
    body_def.position.x = 40
    body_def.position.y = 43
    body_def.fixedRotation = true
    man_body := world.CreateBody body_def
    man_body.SetUserData man_sprite
    fixture_def.friction = 0
    fixture_def.shape = new b2PolygonShape!
    fixture_def.shape.SetAsBox 0.4, 1.1
    man_body.CreateFixture fixture_def

    body_def.position.y += 1.1
    fixture_def.shape = new b2CircleShape 0.4 - 0.01
    fixture_def.shape.m_p.y += 1.1
    fixture_def.friction = 3
    feet_fixture := man_body.CreateFixture fixture_def

  ground_fixture = null
  jumping_duration_remaining = null
  engine.on 'update', (dt, dx) ->
    ground_fixture := do ->
      contact_edge = man_body.GetContactList!
      while contact_edge
        if contact_edge.contact.IsTouching!
          fixtures = [contact_edge.contact.GetFixtureA!, contact_edge.contact.GetFixtureB!]
          for fixture, i of fixtures
            if feet_fixture is fixture
              return fixtures[1 - i]
        contact_edge = contact_edge.next
      null

    # left/right
    horizontal_power = 3
    horizontal_power = 0.25 unless ground_fixture?
    horizontal_intention = 0
    horizontal_intention-- if engine.buttonState Chem.Button.Key_Left
    horizontal_intention++ if engine.buttonState Chem.Button.Key_Right
    man_body.ApplyImpulse new b2Vec2(horizontal_intention * horizontal_power, 0), man_body.m_xf.position

    # JOMP!
    jump_button = Chem.Button.Key_Up
    if ground_fixture? and engine.buttonJustPressed jump_button
      man_body.ApplyImpulse new b2Vec2(0, -31), man_body.m_xf.position
      jumping_duration_remaining := 0.2
    if jumping_duration_remaining? and not engine.buttonState jump_button
      jumping_duration_remaining := null
    if jumping_duration_remaining?
      # stop that gravity
      force = gravity.Copy!
      force.Multiply man_body.GetMass!
      force.NegativeSelf!
      man_body.ApplyForce force, man_body.m_xf.position
      jumping_duration_remaining -= dt
      jumping_duration_remaining := null if jumping_duration_remaining <= 0

    # press space to blow yourself up
    if engine.buttonJustPressed Chem.Button.Key_Space
      boom.play!
      man_sprite.setAnimationName 'boom'
      man_sprite.setFrameIndex 0
      man_sprite.on 'animation_end', ->
        man_sprite.delete!

    world.Step dt, 10, 10
    world.ClearForces!

  const view_scale = 32
  world_to_canvas = ->
    in_pixels = new Chem.Vec2d(it).sub(man_body.m_xf.position).scale(view_scale)
    # snap to integer pixels to prevent seeing cracks between tiles
    in_pixels.floor!
    return in_pixels.add(canvas_center)
  get_view_aabb = ->
    result = new b2AABB
    result.lowerBound.x = man_body.m_xf.position.x - canvas_center.x / view_scale
    result.lowerBound.y = man_body.m_xf.position.y - canvas_center.y / view_scale
    result.upperBound.x = man_body.m_xf.position.x + canvas_center.x / view_scale
    result.upperBound.y = man_body.m_xf.position.y + canvas_center.y / view_scale
    result

  engine.on 'draw', (context) ->
    # clear canvas to black
    context.fillStyle = '#000000'
    context.fillRect 0, 0, engine.size.x, engine.size.y

    # figure out which bodies to draw
    sprite_batch = new Chem.Batch!
    query_aabb world, get_view_aabb!, (fixture) ->
      body = fixture.GetBody!
      sprite = body.GetUserData!
      if sprite instanceof Chem.Sprite
        # set the positions of sprite
        sprite.pos = world_to_canvas body.m_xf.position
        sprite.rotation = body.m_xf.GetAngle!
        sprite_batch.add sprite
      else if (fixture = body.GetFixtureList!)?
        # just draw the bounding box
        context.fillStyle = '#ffff66'
        lower_bound = world_to_canvas fixture.GetAABB!.lowerBound
        upper_bound = world_to_canvas fixture.GetAABB!.upperBound
        context.fillRect(
          lower_bound.x
          lower_bound.y
          upper_bound.x - lower_bound.x
          upper_bound.y - lower_bound.y
        )
      body = body.m_next

    # draw the sprites in front of the above walls
    engine.draw sprite_batch

    # draw a little fps counter in the corner
    context.fillStyle = '#ffffff'
    engine.drawFps!
    context.fillText "grounded = #{ground_fixture?}", 100, canvas_center.y * 2
    context.fillText "jump remaining = #{jumping_duration_remaining}", 200, canvas_center.y * 2

  engine.start!
  canvas.focus!

