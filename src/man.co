const chem = require("chem")
const Entity = require("./entity.co")

const Box2D = window.Box2D
const b2Vec2 = Box2D.Common.Math.b2Vec2
const b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape
const b2MassData = Box2D.Collision.Shapes.b2MassData
const b2FixtureDef = Box2D.Dynamics.b2FixtureDef

module.exports = class Man extends Entity
  half_width: 0.8/2
  sensor_half_width: 0.8/2 * 0.95
  standing_half_height: 2.6/2
  crouching_half_height: 2.0/2
  ground_sensor_height: 0.05
  jump_impulse: new b2Vec2(0, -39)
  jump_stop: -5
  max_speed: 20
  ouch_time: 130
  ~>
    # don't use chem until we're constructed, otherwise the spritesheet may not have loaded yet.
    @standing_sprite = new chem.Sprite 'man_stand', z_order: 1
    @crouching_sprite = new chem.Sprite 'man_crouch', z_order: 1
    @body = null
    @mass = null
    @ground_sensors = {}
    @is_grounded = null
    @was_grounded = false
    @is_crouching = null
    @was_crouching = false
    @is_jumping = false
    @ouching_start = null

  init: (world, aabb, opts) ->
    super ...
    ground_sensor_def = new b2FixtureDef!
    ground_sensor_def.density = 0
    ground_sensor_def.isSensor = true
    ground_sensor_def.shape = @get_ground_sensor_shape 1
    @ground_sensors[1] = @body.CreateFixture ground_sensor_def
    ground_sensor_def.shape = @get_ground_sensor_shape -1
    @ground_sensors[-1] = @body.CreateFixture ground_sensor_def

  get_half_height: -> if @is_crouching then @crouching_half_height else @standing_half_height
  get_sprite: -> if @is_crouching then @crouching_sprite else @standing_sprite
  get_shape: -> b2PolygonShape.AsBox @half_width, @get_half_height!
  get_ground_sensor_shape: (gravity_direction) ->
    b2PolygonShape.AsOrientedBox @sensor_half_width, @ground_sensor_height, new b2Vec2 0, gravity_direction * @get_half_height!
  get_ground_sensor: -> @ground_sensors[@gravity_direction]

  reset_mass: ->
    @body.SetAwake true
    @body.ResetMassData!
    # hold the total mass constant through shape changes
    # but respect the recalculation of center of gravity
    @body.GetMassData(mass_data = new b2MassData)
    mass_data.mass = @mass
    @body.SetMassData mass_data

